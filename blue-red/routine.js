// blue to red osd-filter routine
const cmap = [[1, 0, 255], [1, 0, 253], [2, 0, 253], [4, 0, 252], [4, 0, 251], [5, 0, 250], [7, 0, 248], [7, 0, 248], [9, 0, 247], [10, 0, 246], [11, 0, 245], [12, 0, 244], [13, 0, 243], [13, 0, 241], [14, 1, 241], [15, 0, 239], [17, 0, 239], [18, 0, 238], [18, 0, 236], [20, 0, 235], [21, 0, 235], [22, 0, 234], [23, 0, 233], [24, 0, 232], [25, 0, 230], [25, 0, 230], [27, 0, 228], [28, 0, 228], [28, 0, 227], [30, 0, 225], [30, 0, 224], [31, 0, 224], [32, 0, 222], [34, 0, 222], [35, 0, 220], [35, 0, 220], [36, 0, 218], [37, 0, 218], [39, 0, 216], [39, 0, 216], [40, 0, 214], [42, 0, 213], [42, 0, 213], [43, 0, 212], [45, 0, 210], [45, 0, 210], [46, 0, 208], [47, 0, 208], [48, 0, 206], [50, 0, 206], [50, 0, 204], [51, 0, 204], [52, 0, 202], [53, 0, 201], [54, 0, 200], [56, 0, 199], [56, 0, 198], [57, 0, 198], [58, 0, 197], [60, 0, 196], [61, 0, 195], [62, 0, 193], [62, 0, 193], [63, 0, 191], [64, 0, 191], [65, 0, 190], [66, 0, 189], [68, 1, 188], [69, 0, 186], [69, 0, 186], [71, 0, 184], [71, 0, 184], [73, 0, 183], [73, 0, 182], [75, 0, 180], [75, 0, 180], [77, 0, 178], [78, 0, 178], [78, 0, 177], [80, 0, 175], [80, 1, 174], [81, 0, 174], [83, 0, 173], [84, 0, 171], [84, 0, 171], [85, 0, 170], [86, 0, 169], [88, 0, 167], [88, 0, 167], [89, 0, 165], [91, 0, 164], [91, 0, 163], [92, 0, 163], [93, 0, 162], [94, 0, 161], [96, 0, 160], [96, 0, 159], [97, 0, 158], [98, 0, 157], [99, 0, 156], [100, 0, 155], [101, 0, 153], [103, 0, 153], [103, 0, 152], [104, 0, 150], [105, 0, 150], [106, 0, 148], [107, 0, 148], [108, 0, 147], [110, 0, 146], [110, 0, 145], [111, 0, 143], [112, 0, 142], [113, 0, 142], [114, 0, 141], [115, 0, 140], [117, 0, 139], [118, 0, 138], [118, 0, 136], [119, 0, 136], [120, 0, 135], [121, 0, 134], [122, 0, 133], [124, 0, 132], [124, 0, 131], [125, 0, 130], [126, 0, 129], [127, 0, 128], [129, 0, 126], [129, 0, 125], [130, 0, 125], [131, 0, 124], [132, 0, 123], [133, 0, 122], [135, 0, 121], [135, 0, 120], [137, 0, 119], [138, 1, 118], [138, 0, 116], [139, 0, 116], [141, 0, 114], [141, 0, 113], [143, 0, 113], [144, 0, 112], [144, 0, 111], [146, 0, 109], [146, 0, 108], [147, 0, 108], [148, 0, 107], [149, 0, 106], [150, 0, 105], [152, 0, 104], [153, 0, 103], [153, 0, 101], [154, 0, 101], [155, 0, 100], [157, 0, 99], [157, 0, 98], [158, 0, 97], [160, 0, 96], [161, 0, 94], [161, 0, 94], [163, 0, 93], [163, 0, 92], [164, 0, 91], [165, 0, 89], [166, 0, 88], [167, 0, 88], [169, 0, 87], [169, 0, 86], [170, 0, 85], [171, 0, 83], [172, 0, 83], [173, 0, 82], [175, 0, 81], [176, 0, 80], [177, 0, 79], [178, 0, 77], [179, 0, 77], [179, 0, 75], [180, 0, 75], [181, 0, 74], [182, 0, 73], [184, 0, 72], [184, 0, 71], [185, 0, 70], [186, 0, 69], [187, 0, 68], [188, 0, 67], [189, 0, 66], [191, 0, 65], [191, 0, 64], [193, 0, 63], [193, 0, 61], [194, 0, 61], [195, 0, 60], [197, 0, 59], [197, 0, 58], [198, 0, 57], [199, 0, 56], [200, 0, 54], [201, 0, 53], [202, 0, 53], [203, 0, 52], [205, 0, 51], [205, 0, 50], [206, 1, 49], [207, 0, 47], [208, 0, 47], [209, 0, 46], [210, 0, 45], [211, 0, 43], [213, 0, 43], [213, 0, 42], [214, 0, 41], [215, 0, 39], [216, 0, 39], [217, 0, 37], [218, 0, 37], [220, 0, 36], [220, 0, 35], [221, 0, 34], [222, 0, 33], [223, 0, 32], [224, 0, 31], [225, 0, 30], [226, 0, 29], [227, 0, 27], [228, 0, 27], [229, 0, 26], [231, 0, 25], [231, 0, 24], [233, 0, 23], [233, 0, 22], [234, 0, 21], [235, 0, 20], [236, 0, 19], [237, 0, 18], [238, 0, 17], [239, 0, 16], [240, 0, 15], [241, 0, 14], [242, 0, 13], [243, 0, 12], [244, 0, 11], [245, 0, 10], [246, 0, 9], [247, 0, 8], [248, 0, 7], [249, 0, 6], [250, 0, 5], [252, 0, 4], [252, 0, 3], [253, 0, 2], [254, 0, 1], [255, 0, 0]]
const resampledCmap = cmap.slice(0)
const ctr = 128
const diff = 255 - ctr
for (let i = 0; i < 256; i++) {
  let position = 0
  if (i > ctr) {
    position = Math.min((i - ctr) / diff * 128 + 128, 255) | 0
  } else {
    position = Math.max(0, i / (ctr / 128)) | 0
  }
  resampledCmap[i] = cmap[position]
}
const pxl = imgData.data
for (let i = 0; i < pxl.length; i += 4) {
  if (pxl[i + 3] === 255) {
    // let v = (pxl[i] + pxl[i + 1] + pxl[i + 2]) / 3 | 0 // works
    let v = (pxl[i + 1]) // green channel
    const c = resampledCmap[v]
    pxl[i] = c[0]
    pxl[i + 1] = c[1]
    pxl[i + 2] = c[2]
    pxl[i + 3] = 255
  } else {
    pxl[i + 3] = 0
  }
}
